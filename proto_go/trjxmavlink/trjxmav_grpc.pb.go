// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: github.com/trajectoryjp/trjx-vehicle-api/proto/mav_controller_outside/trjxmav.proto

package trjxmavlink

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TrjxMavlinkServiceClient is the client API for TrjxMavlinkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrjxMavlinkServiceClient interface {
	// バージョン情報取得。認証不要。
	GetSeriviceAttribute(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SeriviceAttribute, error)
	// aircraftとpasswordで認証
	Login(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Token, error)
	// AutopilotModel通知
	SetAutopilotModel(ctx context.Context, in *SetAutopilotModelRequest, opts ...grpc.CallOption) (*Result, error)
	// 機体とのテレメトリーおよびコマンド送受。機体ごとのストリーム。
	CommunicateOnMavlink(ctx context.Context, opts ...grpc.CallOption) (TrjxMavlinkService_CommunicateOnMavlinkClient, error)
}

type trjxMavlinkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTrjxMavlinkServiceClient(cc grpc.ClientConnInterface) TrjxMavlinkServiceClient {
	return &trjxMavlinkServiceClient{cc}
}

func (c *trjxMavlinkServiceClient) GetSeriviceAttribute(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SeriviceAttribute, error) {
	out := new(SeriviceAttribute)
	err := c.cc.Invoke(ctx, "/trjxmavlink.TrjxMavlinkService/GetSeriviceAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trjxMavlinkServiceClient) Login(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := c.cc.Invoke(ctx, "/trjxmavlink.TrjxMavlinkService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trjxMavlinkServiceClient) SetAutopilotModel(ctx context.Context, in *SetAutopilotModelRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/trjxmavlink.TrjxMavlinkService/SetAutopilotModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trjxMavlinkServiceClient) CommunicateOnMavlink(ctx context.Context, opts ...grpc.CallOption) (TrjxMavlinkService_CommunicateOnMavlinkClient, error) {
	stream, err := c.cc.NewStream(ctx, &TrjxMavlinkService_ServiceDesc.Streams[0], "/trjxmavlink.TrjxMavlinkService/CommunicateOnMavlink", opts...)
	if err != nil {
		return nil, err
	}
	x := &trjxMavlinkServiceCommunicateOnMavlinkClient{stream}
	return x, nil
}

type TrjxMavlinkService_CommunicateOnMavlinkClient interface {
	Send(*TrjxMavlink) error
	Recv() (*TrjxMavlink, error)
	grpc.ClientStream
}

type trjxMavlinkServiceCommunicateOnMavlinkClient struct {
	grpc.ClientStream
}

func (x *trjxMavlinkServiceCommunicateOnMavlinkClient) Send(m *TrjxMavlink) error {
	return x.ClientStream.SendMsg(m)
}

func (x *trjxMavlinkServiceCommunicateOnMavlinkClient) Recv() (*TrjxMavlink, error) {
	m := new(TrjxMavlink)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TrjxMavlinkServiceServer is the server API for TrjxMavlinkService service.
// All implementations must embed UnimplementedTrjxMavlinkServiceServer
// for forward compatibility
type TrjxMavlinkServiceServer interface {
	// バージョン情報取得。認証不要。
	GetSeriviceAttribute(context.Context, *Empty) (*SeriviceAttribute, error)
	// aircraftとpasswordで認証
	Login(context.Context, *Empty) (*Token, error)
	// AutopilotModel通知
	SetAutopilotModel(context.Context, *SetAutopilotModelRequest) (*Result, error)
	// 機体とのテレメトリーおよびコマンド送受。機体ごとのストリーム。
	CommunicateOnMavlink(TrjxMavlinkService_CommunicateOnMavlinkServer) error
	mustEmbedUnimplementedTrjxMavlinkServiceServer()
}

// UnimplementedTrjxMavlinkServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTrjxMavlinkServiceServer struct {
}

func (UnimplementedTrjxMavlinkServiceServer) GetSeriviceAttribute(context.Context, *Empty) (*SeriviceAttribute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeriviceAttribute not implemented")
}
func (UnimplementedTrjxMavlinkServiceServer) Login(context.Context, *Empty) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedTrjxMavlinkServiceServer) SetAutopilotModel(context.Context, *SetAutopilotModelRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAutopilotModel not implemented")
}
func (UnimplementedTrjxMavlinkServiceServer) CommunicateOnMavlink(TrjxMavlinkService_CommunicateOnMavlinkServer) error {
	return status.Errorf(codes.Unimplemented, "method CommunicateOnMavlink not implemented")
}
func (UnimplementedTrjxMavlinkServiceServer) mustEmbedUnimplementedTrjxMavlinkServiceServer() {}

// UnsafeTrjxMavlinkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrjxMavlinkServiceServer will
// result in compilation errors.
type UnsafeTrjxMavlinkServiceServer interface {
	mustEmbedUnimplementedTrjxMavlinkServiceServer()
}

func RegisterTrjxMavlinkServiceServer(s grpc.ServiceRegistrar, srv TrjxMavlinkServiceServer) {
	s.RegisterService(&TrjxMavlinkService_ServiceDesc, srv)
}

func _TrjxMavlinkService_GetSeriviceAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrjxMavlinkServiceServer).GetSeriviceAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trjxmavlink.TrjxMavlinkService/GetSeriviceAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrjxMavlinkServiceServer).GetSeriviceAttribute(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrjxMavlinkService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrjxMavlinkServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trjxmavlink.TrjxMavlinkService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrjxMavlinkServiceServer).Login(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrjxMavlinkService_SetAutopilotModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAutopilotModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrjxMavlinkServiceServer).SetAutopilotModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trjxmavlink.TrjxMavlinkService/SetAutopilotModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrjxMavlinkServiceServer).SetAutopilotModel(ctx, req.(*SetAutopilotModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrjxMavlinkService_CommunicateOnMavlink_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TrjxMavlinkServiceServer).CommunicateOnMavlink(&trjxMavlinkServiceCommunicateOnMavlinkServer{stream})
}

type TrjxMavlinkService_CommunicateOnMavlinkServer interface {
	Send(*TrjxMavlink) error
	Recv() (*TrjxMavlink, error)
	grpc.ServerStream
}

type trjxMavlinkServiceCommunicateOnMavlinkServer struct {
	grpc.ServerStream
}

func (x *trjxMavlinkServiceCommunicateOnMavlinkServer) Send(m *TrjxMavlink) error {
	return x.ServerStream.SendMsg(m)
}

func (x *trjxMavlinkServiceCommunicateOnMavlinkServer) Recv() (*TrjxMavlink, error) {
	m := new(TrjxMavlink)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TrjxMavlinkService_ServiceDesc is the grpc.ServiceDesc for TrjxMavlinkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrjxMavlinkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "trjxmavlink.TrjxMavlinkService",
	HandlerType: (*TrjxMavlinkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSeriviceAttribute",
			Handler:    _TrjxMavlinkService_GetSeriviceAttribute_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _TrjxMavlinkService_Login_Handler,
		},
		{
			MethodName: "SetAutopilotModel",
			Handler:    _TrjxMavlinkService_SetAutopilotModel_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CommunicateOnMavlink",
			Handler:       _TrjxMavlinkService_CommunicateOnMavlink_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "github.com/trajectoryjp/trjx-vehicle-api/proto/mav_controller_outside/trjxmav.proto",
}
